
stack_array_based.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000982  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000982  00000a16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800064  00800064  00000a1a  2**0
                  ALLOC
  3 .stab         000008c4  00000000  00000000  00000a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a92  00000000  00000000  000012e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e8       	ldi	r30, 0x82	; 130
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 bf 04 	jmp	0x97e	; 0x97e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <stdlib.h>
#include "Stack.h"


int main()
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	cc 5c       	subi	r28, 0xCC	; 204
  9c:	d0 40       	sbci	r29, 0x00	; 0
  9e:	0f b6       	in	r0, 0x3f	; 63
  a0:	f8 94       	cli
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	cd bf       	out	0x3d, r28	; 61
    //user level
    Stack s;
    StackEntry item;

    IntializeStack(&s);
  a8:	ce 01       	movw	r24, r28
  aa:	01 96       	adiw	r24, 0x01	; 1
  ac:	0e 94 cb 00 	call	0x196	; 0x196 <IntializeStack>
    //pre check that stack is initialized and not full
    if(!StackFull(&s)){
  b0:	ce 01       	movw	r24, r28
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	0e 94 31 01 	call	0x262	; 0x262 <StackFull>
  b8:	00 97       	sbiw	r24, 0x00	; 0
  ba:	59 f4       	brne	.+22     	; 0xd2 <main+0x40>
        Push(item,&s);
  bc:	fe 01       	movw	r30, r28
  be:	e5 53       	subi	r30, 0x35	; 53
  c0:	ff 4f       	sbci	r31, 0xFF	; 255
  c2:	80 81       	ld	r24, Z
  c4:	91 81       	ldd	r25, Z+1	; 0x01
  c6:	9e 01       	movw	r18, r28
  c8:	2f 5f       	subi	r18, 0xFF	; 255
  ca:	3f 4f       	sbci	r19, 0xFF	; 255
  cc:	b9 01       	movw	r22, r18
  ce:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Push>
    }
    //pre check that stack is initialized and not empty
    if(!StackEmpty(&s)){
  d2:	ce 01       	movw	r24, r28
  d4:	01 96       	adiw	r24, 0x01	; 1
  d6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <StackEmpty>
  da:	00 97       	sbiw	r24, 0x00	; 0
  dc:	49 f4       	brne	.+18     	; 0xf0 <main+0x5e>
        Pop(&item, &s);
  de:	ce 01       	movw	r24, r28
  e0:	85 53       	subi	r24, 0x35	; 53
  e2:	9f 4f       	sbci	r25, 0xFF	; 255
  e4:	9e 01       	movw	r18, r28
  e6:	2f 5f       	subi	r18, 0xFF	; 255
  e8:	3f 4f       	sbci	r19, 0xFF	; 255
  ea:	b9 01       	movw	r22, r18
  ec:	0e 94 05 01 	call	0x20a	; 0x20a <Pop>
    void StackTop_user_level(StackEntry *ptr_item, Stack *ptr_stack){
      Pop(ptr_item, ptr_stack);
      Push(*ptr_item,ptr_stack);
    }

    TraverseStack (&s, &Display);
  f0:	2c ea       	ldi	r18, 0xAC	; 172
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	ce 01       	movw	r24, r28
  f6:	01 96       	adiw	r24, 0x01	; 1
  f8:	b9 01       	movw	r22, r18
  fa:	0e 94 c1 01 	call	0x382	; 0x382 <TraverseStack>
    return 0;
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	90 e0       	ldi	r25, 0x00	; 0
}
 102:	c4 53       	subi	r28, 0x34	; 52
 104:	df 4f       	sbci	r29, 0xFF	; 255
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	f8 94       	cli
 10a:	de bf       	out	0x3e, r29	; 62
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	cd bf       	out	0x3d, r28	; 61
 110:	cf 91       	pop	r28
 112:	df 91       	pop	r29
 114:	08 95       	ret

00000116 <StackTop_user_level.1510>:
        Pop(&item, &s);
    }
    void Display (StackEntry item) {
      printf("%d",item);
    }
    void StackTop_user_level(StackEntry *ptr_item, Stack *ptr_stack){
 116:	df 93       	push	r29
 118:	cf 93       	push	r28
 11a:	00 d0       	rcall	.+0      	; 0x11c <StackTop_user_level.1510+0x6>
 11c:	00 d0       	rcall	.+0      	; 0x11e <StackTop_user_level.1510+0x8>
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
 122:	9a 83       	std	Y+2, r25	; 0x02
 124:	89 83       	std	Y+1, r24	; 0x01
 126:	7c 83       	std	Y+4, r23	; 0x04
 128:	6b 83       	std	Y+3, r22	; 0x03
      Pop(ptr_item, ptr_stack);
 12a:	89 81       	ldd	r24, Y+1	; 0x01
 12c:	9a 81       	ldd	r25, Y+2	; 0x02
 12e:	2b 81       	ldd	r18, Y+3	; 0x03
 130:	3c 81       	ldd	r19, Y+4	; 0x04
 132:	b9 01       	movw	r22, r18
 134:	0e 94 05 01 	call	0x20a	; 0x20a <Pop>
      Push(*ptr_item,ptr_stack);
 138:	e9 81       	ldd	r30, Y+1	; 0x01
 13a:	fa 81       	ldd	r31, Y+2	; 0x02
 13c:	80 81       	ld	r24, Z
 13e:	91 81       	ldd	r25, Z+1	; 0x01
 140:	2b 81       	ldd	r18, Y+3	; 0x03
 142:	3c 81       	ldd	r19, Y+4	; 0x04
 144:	b9 01       	movw	r22, r18
 146:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Push>
    }
 14a:	0f 90       	pop	r0
 14c:	0f 90       	pop	r0
 14e:	0f 90       	pop	r0
 150:	0f 90       	pop	r0
 152:	cf 91       	pop	r28
 154:	df 91       	pop	r29
 156:	08 95       	ret

00000158 <Display.1506>:
    }
    //pre check that stack is initialized and not empty
    if(!StackEmpty(&s)){
        Pop(&item, &s);
    }
    void Display (StackEntry item) {
 158:	df 93       	push	r29
 15a:	cf 93       	push	r28
 15c:	00 d0       	rcall	.+0      	; 0x15e <Display.1506+0x6>
 15e:	cd b7       	in	r28, 0x3d	; 61
 160:	de b7       	in	r29, 0x3e	; 62
 162:	9a 83       	std	Y+2, r25	; 0x02
 164:	89 83       	std	Y+1, r24	; 0x01
      printf("%d",item);
 166:	00 d0       	rcall	.+0      	; 0x168 <Display.1506+0x10>
 168:	00 d0       	rcall	.+0      	; 0x16a <Display.1506+0x12>
 16a:	ed b7       	in	r30, 0x3d	; 61
 16c:	fe b7       	in	r31, 0x3e	; 62
 16e:	31 96       	adiw	r30, 0x01	; 1
 170:	80 e6       	ldi	r24, 0x60	; 96
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	91 83       	std	Z+1, r25	; 0x01
 176:	80 83       	st	Z, r24
 178:	89 81       	ldd	r24, Y+1	; 0x01
 17a:	9a 81       	ldd	r25, Y+2	; 0x02
 17c:	93 83       	std	Z+3, r25	; 0x03
 17e:	82 83       	std	Z+2, r24	; 0x02
 180:	0e 94 f6 01 	call	0x3ec	; 0x3ec <printf>
 184:	0f 90       	pop	r0
 186:	0f 90       	pop	r0
 188:	0f 90       	pop	r0
 18a:	0f 90       	pop	r0
    }
 18c:	0f 90       	pop	r0
 18e:	0f 90       	pop	r0
 190:	cf 91       	pop	r28
 192:	df 91       	pop	r29
 194:	08 95       	ret

00000196 <IntializeStack>:


//array based implementation of stack data structure

//implementation level
void IntializeStack(Stack *ptr_stack){
 196:	df 93       	push	r29
 198:	cf 93       	push	r28
 19a:	00 d0       	rcall	.+0      	; 0x19c <IntializeStack+0x6>
 19c:	cd b7       	in	r28, 0x3d	; 61
 19e:	de b7       	in	r29, 0x3e	; 62
 1a0:	9a 83       	std	Y+2, r25	; 0x02
 1a2:	89 83       	std	Y+1, r24	; 0x01
   ptr_stack->top=0; //push then top++
 1a4:	e9 81       	ldd	r30, Y+1	; 0x01
 1a6:	fa 81       	ldd	r31, Y+2	; 0x02
 1a8:	11 82       	std	Z+1, r1	; 0x01
 1aa:	10 82       	st	Z, r1
   //ptr_stack->top=-1; //top++ then push ->>>>> ptr_stack->entry[ptr_stack->++top]=item;
}
 1ac:	0f 90       	pop	r0
 1ae:	0f 90       	pop	r0
 1b0:	cf 91       	pop	r28
 1b2:	df 91       	pop	r29
 1b4:	08 95       	ret

000001b6 <Push>:
void Push(StackEntry item,Stack *ptr_stack){
 1b6:	df 93       	push	r29
 1b8:	cf 93       	push	r28
 1ba:	00 d0       	rcall	.+0      	; 0x1bc <Push+0x6>
 1bc:	00 d0       	rcall	.+0      	; 0x1be <Push+0x8>
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
 1c2:	9a 83       	std	Y+2, r25	; 0x02
 1c4:	89 83       	std	Y+1, r24	; 0x01
 1c6:	7c 83       	std	Y+4, r23	; 0x04
 1c8:	6b 83       	std	Y+3, r22	; 0x03
    //push then top++ in one line ptr_stack->entry[ptr_stack->top++]=item;
   //ptr_stack->entry[++(ptr_stack->top)]=item;
   ptr_stack->entry[ptr_stack->top]=item;
 1ca:	eb 81       	ldd	r30, Y+3	; 0x03
 1cc:	fc 81       	ldd	r31, Y+4	; 0x04
 1ce:	80 81       	ld	r24, Z
 1d0:	91 81       	ldd	r25, Z+1	; 0x01
 1d2:	2b 81       	ldd	r18, Y+3	; 0x03
 1d4:	3c 81       	ldd	r19, Y+4	; 0x04
 1d6:	01 96       	adiw	r24, 0x01	; 1
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	f9 01       	movw	r30, r18
 1de:	e8 0f       	add	r30, r24
 1e0:	f9 1f       	adc	r31, r25
 1e2:	89 81       	ldd	r24, Y+1	; 0x01
 1e4:	9a 81       	ldd	r25, Y+2	; 0x02
 1e6:	91 83       	std	Z+1, r25	; 0x01
 1e8:	80 83       	st	Z, r24
   ptr_stack->top++;
 1ea:	eb 81       	ldd	r30, Y+3	; 0x03
 1ec:	fc 81       	ldd	r31, Y+4	; 0x04
 1ee:	80 81       	ld	r24, Z
 1f0:	91 81       	ldd	r25, Z+1	; 0x01
 1f2:	01 96       	adiw	r24, 0x01	; 1
 1f4:	eb 81       	ldd	r30, Y+3	; 0x03
 1f6:	fc 81       	ldd	r31, Y+4	; 0x04
 1f8:	91 83       	std	Z+1, r25	; 0x01
 1fa:	80 83       	st	Z, r24
}
 1fc:	0f 90       	pop	r0
 1fe:	0f 90       	pop	r0
 200:	0f 90       	pop	r0
 202:	0f 90       	pop	r0
 204:	cf 91       	pop	r28
 206:	df 91       	pop	r29
 208:	08 95       	ret

0000020a <Pop>:
void Pop(StackEntry *item,Stack *ptr_stack){
 20a:	df 93       	push	r29
 20c:	cf 93       	push	r28
 20e:	00 d0       	rcall	.+0      	; 0x210 <Pop+0x6>
 210:	00 d0       	rcall	.+0      	; 0x212 <Pop+0x8>
 212:	cd b7       	in	r28, 0x3d	; 61
 214:	de b7       	in	r29, 0x3e	; 62
 216:	9a 83       	std	Y+2, r25	; 0x02
 218:	89 83       	std	Y+1, r24	; 0x01
 21a:	7c 83       	std	Y+4, r23	; 0x04
 21c:	6b 83       	std	Y+3, r22	; 0x03
     //top-- then pop
     ptr_stack->top--;
 21e:	eb 81       	ldd	r30, Y+3	; 0x03
 220:	fc 81       	ldd	r31, Y+4	; 0x04
 222:	80 81       	ld	r24, Z
 224:	91 81       	ldd	r25, Z+1	; 0x01
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	eb 81       	ldd	r30, Y+3	; 0x03
 22a:	fc 81       	ldd	r31, Y+4	; 0x04
 22c:	91 83       	std	Z+1, r25	; 0x01
 22e:	80 83       	st	Z, r24
     *item = ptr_stack->entry[ptr_stack->top];
 230:	eb 81       	ldd	r30, Y+3	; 0x03
 232:	fc 81       	ldd	r31, Y+4	; 0x04
 234:	80 81       	ld	r24, Z
 236:	91 81       	ldd	r25, Z+1	; 0x01
 238:	2b 81       	ldd	r18, Y+3	; 0x03
 23a:	3c 81       	ldd	r19, Y+4	; 0x04
 23c:	01 96       	adiw	r24, 0x01	; 1
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	f9 01       	movw	r30, r18
 244:	e8 0f       	add	r30, r24
 246:	f9 1f       	adc	r31, r25
 248:	80 81       	ld	r24, Z
 24a:	91 81       	ldd	r25, Z+1	; 0x01
 24c:	e9 81       	ldd	r30, Y+1	; 0x01
 24e:	fa 81       	ldd	r31, Y+2	; 0x02
 250:	91 83       	std	Z+1, r25	; 0x01
 252:	80 83       	st	Z, r24
}
 254:	0f 90       	pop	r0
 256:	0f 90       	pop	r0
 258:	0f 90       	pop	r0
 25a:	0f 90       	pop	r0
 25c:	cf 91       	pop	r28
 25e:	df 91       	pop	r29
 260:	08 95       	ret

00000262 <StackFull>:
//StackEntry Pop(Stack *ptr_stack){
    //top-- then pop
 //   ptr_stack->top--;
  // return ptr_stack->entry[ptr_stack->top];
//}
int StackFull(Stack *ptr_stack){
 262:	df 93       	push	r29
 264:	cf 93       	push	r28
 266:	00 d0       	rcall	.+0      	; 0x268 <StackFull+0x6>
 268:	00 d0       	rcall	.+0      	; 0x26a <StackFull+0x8>
 26a:	cd b7       	in	r28, 0x3d	; 61
 26c:	de b7       	in	r29, 0x3e	; 62
 26e:	9a 83       	std	Y+2, r25	; 0x02
 270:	89 83       	std	Y+1, r24	; 0x01
  if(ptr_stack->top==MAXSTACK){return 1;}
 272:	e9 81       	ldd	r30, Y+1	; 0x01
 274:	fa 81       	ldd	r31, Y+2	; 0x02
 276:	80 81       	ld	r24, Z
 278:	91 81       	ldd	r25, Z+1	; 0x01
 27a:	84 36       	cpi	r24, 0x64	; 100
 27c:	91 05       	cpc	r25, r1
 27e:	29 f4       	brne	.+10     	; 0x28a <StackFull+0x28>
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	9c 83       	std	Y+4, r25	; 0x04
 286:	8b 83       	std	Y+3, r24	; 0x03
 288:	02 c0       	rjmp	.+4      	; 0x28e <StackFull+0x2c>
  else {return 0;}
 28a:	1c 82       	std	Y+4, r1	; 0x04
 28c:	1b 82       	std	Y+3, r1	; 0x03
 28e:	8b 81       	ldd	r24, Y+3	; 0x03
 290:	9c 81       	ldd	r25, Y+4	; 0x04
}
 292:	0f 90       	pop	r0
 294:	0f 90       	pop	r0
 296:	0f 90       	pop	r0
 298:	0f 90       	pop	r0
 29a:	cf 91       	pop	r28
 29c:	df 91       	pop	r29
 29e:	08 95       	ret

000002a0 <StackEmpty>:
int StackEmpty(Stack *ptr_stack){
 2a0:	df 93       	push	r29
 2a2:	cf 93       	push	r28
 2a4:	00 d0       	rcall	.+0      	; 0x2a6 <StackEmpty+0x6>
 2a6:	00 d0       	rcall	.+0      	; 0x2a8 <StackEmpty+0x8>
 2a8:	cd b7       	in	r28, 0x3d	; 61
 2aa:	de b7       	in	r29, 0x3e	; 62
 2ac:	9a 83       	std	Y+2, r25	; 0x02
 2ae:	89 83       	std	Y+1, r24	; 0x01
   if(ptr_stack->top==0){return 1;}
 2b0:	e9 81       	ldd	r30, Y+1	; 0x01
 2b2:	fa 81       	ldd	r31, Y+2	; 0x02
 2b4:	80 81       	ld	r24, Z
 2b6:	91 81       	ldd	r25, Z+1	; 0x01
 2b8:	00 97       	sbiw	r24, 0x00	; 0
 2ba:	29 f4       	brne	.+10     	; 0x2c6 <StackEmpty+0x26>
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	9c 83       	std	Y+4, r25	; 0x04
 2c2:	8b 83       	std	Y+3, r24	; 0x03
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <StackEmpty+0x2a>
   else {return 0;}
 2c6:	1c 82       	std	Y+4, r1	; 0x04
 2c8:	1b 82       	std	Y+3, r1	; 0x03
 2ca:	8b 81       	ldd	r24, Y+3	; 0x03
 2cc:	9c 81       	ldd	r25, Y+4	; 0x04
}
 2ce:	0f 90       	pop	r0
 2d0:	0f 90       	pop	r0
 2d2:	0f 90       	pop	r0
 2d4:	0f 90       	pop	r0
 2d6:	cf 91       	pop	r28
 2d8:	df 91       	pop	r29
 2da:	08 95       	ret

000002dc <StackTop>:
void StackTop(StackEntry *item, Stack *ptr_stack){
 2dc:	df 93       	push	r29
 2de:	cf 93       	push	r28
 2e0:	00 d0       	rcall	.+0      	; 0x2e2 <StackTop+0x6>
 2e2:	00 d0       	rcall	.+0      	; 0x2e4 <StackTop+0x8>
 2e4:	cd b7       	in	r28, 0x3d	; 61
 2e6:	de b7       	in	r29, 0x3e	; 62
 2e8:	9a 83       	std	Y+2, r25	; 0x02
 2ea:	89 83       	std	Y+1, r24	; 0x01
 2ec:	7c 83       	std	Y+4, r23	; 0x04
 2ee:	6b 83       	std	Y+3, r22	; 0x03
  //top-- then pop
  ptr_stack->top--;
 2f0:	eb 81       	ldd	r30, Y+3	; 0x03
 2f2:	fc 81       	ldd	r31, Y+4	; 0x04
 2f4:	80 81       	ld	r24, Z
 2f6:	91 81       	ldd	r25, Z+1	; 0x01
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	eb 81       	ldd	r30, Y+3	; 0x03
 2fc:	fc 81       	ldd	r31, Y+4	; 0x04
 2fe:	91 83       	std	Z+1, r25	; 0x01
 300:	80 83       	st	Z, r24
  *item = ptr_stack->entry[ptr_stack->top++];
 302:	eb 81       	ldd	r30, Y+3	; 0x03
 304:	fc 81       	ldd	r31, Y+4	; 0x04
 306:	40 81       	ld	r20, Z
 308:	51 81       	ldd	r21, Z+1	; 0x01
 30a:	2b 81       	ldd	r18, Y+3	; 0x03
 30c:	3c 81       	ldd	r19, Y+4	; 0x04
 30e:	ca 01       	movw	r24, r20
 310:	01 96       	adiw	r24, 0x01	; 1
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	f9 01       	movw	r30, r18
 318:	e8 0f       	add	r30, r24
 31a:	f9 1f       	adc	r31, r25
 31c:	80 81       	ld	r24, Z
 31e:	91 81       	ldd	r25, Z+1	; 0x01
 320:	e9 81       	ldd	r30, Y+1	; 0x01
 322:	fa 81       	ldd	r31, Y+2	; 0x02
 324:	91 83       	std	Z+1, r25	; 0x01
 326:	80 83       	st	Z, r24
 328:	ca 01       	movw	r24, r20
 32a:	01 96       	adiw	r24, 0x01	; 1
 32c:	eb 81       	ldd	r30, Y+3	; 0x03
 32e:	fc 81       	ldd	r31, Y+4	; 0x04
 330:	91 83       	std	Z+1, r25	; 0x01
 332:	80 83       	st	Z, r24
  //*item = ptr_stack->entry[ptr_stack->top-1];
}
 334:	0f 90       	pop	r0
 336:	0f 90       	pop	r0
 338:	0f 90       	pop	r0
 33a:	0f 90       	pop	r0
 33c:	cf 91       	pop	r28
 33e:	df 91       	pop	r29
 340:	08 95       	ret

00000342 <StackSize>:
int StackSize(Stack *ptr_stack){
 342:	df 93       	push	r29
 344:	cf 93       	push	r28
 346:	00 d0       	rcall	.+0      	; 0x348 <StackSize+0x6>
 348:	cd b7       	in	r28, 0x3d	; 61
 34a:	de b7       	in	r29, 0x3e	; 62
 34c:	9a 83       	std	Y+2, r25	; 0x02
 34e:	89 83       	std	Y+1, r24	; 0x01
   //while(temp!=0){
   // count++;
   // temp--;
  // }
  // return count;
  return ptr_stack->top;
 350:	e9 81       	ldd	r30, Y+1	; 0x01
 352:	fa 81       	ldd	r31, Y+2	; 0x02
 354:	80 81       	ld	r24, Z
 356:	91 81       	ldd	r25, Z+1	; 0x01
}
 358:	0f 90       	pop	r0
 35a:	0f 90       	pop	r0
 35c:	cf 91       	pop	r28
 35e:	df 91       	pop	r29
 360:	08 95       	ret

00000362 <ClearStack>:
void ClearStack(Stack *ptr_stack){
 362:	df 93       	push	r29
 364:	cf 93       	push	r28
 366:	00 d0       	rcall	.+0      	; 0x368 <ClearStack+0x6>
 368:	cd b7       	in	r28, 0x3d	; 61
 36a:	de b7       	in	r29, 0x3e	; 62
 36c:	9a 83       	std	Y+2, r25	; 0x02
 36e:	89 83       	std	Y+1, r24	; 0x01
    ptr_stack->top=0;
 370:	e9 81       	ldd	r30, Y+1	; 0x01
 372:	fa 81       	ldd	r31, Y+2	; 0x02
 374:	11 82       	std	Z+1, r1	; 0x01
 376:	10 82       	st	Z, r1
}
 378:	0f 90       	pop	r0
 37a:	0f 90       	pop	r0
 37c:	cf 91       	pop	r28
 37e:	df 91       	pop	r29
 380:	08 95       	ret

00000382 <TraverseStack>:
void TraverseStack (Stack *ptr_stack, void (*ptr_fun)(StackEntry)){
 382:	df 93       	push	r29
 384:	cf 93       	push	r28
 386:	00 d0       	rcall	.+0      	; 0x388 <TraverseStack+0x6>
 388:	00 d0       	rcall	.+0      	; 0x38a <TraverseStack+0x8>
 38a:	00 d0       	rcall	.+0      	; 0x38c <TraverseStack+0xa>
 38c:	cd b7       	in	r28, 0x3d	; 61
 38e:	de b7       	in	r29, 0x3e	; 62
 390:	9c 83       	std	Y+4, r25	; 0x04
 392:	8b 83       	std	Y+3, r24	; 0x03
 394:	7e 83       	std	Y+6, r23	; 0x06
 396:	6d 83       	std	Y+5, r22	; 0x05
  for(int i=ptr_stack->top;i>0;i--){
 398:	eb 81       	ldd	r30, Y+3	; 0x03
 39a:	fc 81       	ldd	r31, Y+4	; 0x04
 39c:	80 81       	ld	r24, Z
 39e:	91 81       	ldd	r25, Z+1	; 0x01
 3a0:	9a 83       	std	Y+2, r25	; 0x02
 3a2:	89 83       	std	Y+1, r24	; 0x01
 3a4:	15 c0       	rjmp	.+42     	; 0x3d0 <TraverseStack+0x4e>
    (*ptr_fun)(ptr_stack->entry[i-1]);
 3a6:	89 81       	ldd	r24, Y+1	; 0x01
 3a8:	9a 81       	ldd	r25, Y+2	; 0x02
 3aa:	01 97       	sbiw	r24, 0x01	; 1
 3ac:	2b 81       	ldd	r18, Y+3	; 0x03
 3ae:	3c 81       	ldd	r19, Y+4	; 0x04
 3b0:	01 96       	adiw	r24, 0x01	; 1
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	f9 01       	movw	r30, r18
 3b8:	e8 0f       	add	r30, r24
 3ba:	f9 1f       	adc	r31, r25
 3bc:	80 81       	ld	r24, Z
 3be:	91 81       	ldd	r25, Z+1	; 0x01
 3c0:	ed 81       	ldd	r30, Y+5	; 0x05
 3c2:	fe 81       	ldd	r31, Y+6	; 0x06
 3c4:	09 95       	icall
}
void ClearStack(Stack *ptr_stack){
    ptr_stack->top=0;
}
void TraverseStack (Stack *ptr_stack, void (*ptr_fun)(StackEntry)){
  for(int i=ptr_stack->top;i>0;i--){
 3c6:	89 81       	ldd	r24, Y+1	; 0x01
 3c8:	9a 81       	ldd	r25, Y+2	; 0x02
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	9a 83       	std	Y+2, r25	; 0x02
 3ce:	89 83       	std	Y+1, r24	; 0x01
 3d0:	89 81       	ldd	r24, Y+1	; 0x01
 3d2:	9a 81       	ldd	r25, Y+2	; 0x02
 3d4:	18 16       	cp	r1, r24
 3d6:	19 06       	cpc	r1, r25
 3d8:	34 f3       	brlt	.-52     	; 0x3a6 <TraverseStack+0x24>
    (*ptr_fun)(ptr_stack->entry[i-1]);
  }
}
 3da:	26 96       	adiw	r28, 0x06	; 6
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	f8 94       	cli
 3e0:	de bf       	out	0x3e, r29	; 62
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	cd bf       	out	0x3d, r28	; 61
 3e6:	cf 91       	pop	r28
 3e8:	df 91       	pop	r29
 3ea:	08 95       	ret

000003ec <printf>:
 3ec:	a0 e0       	ldi	r26, 0x00	; 0
 3ee:	b0 e0       	ldi	r27, 0x00	; 0
 3f0:	ec ef       	ldi	r30, 0xFC	; 252
 3f2:	f1 e0       	ldi	r31, 0x01	; 1
 3f4:	0c 94 98 04 	jmp	0x930	; 0x930 <__prologue_saves__+0x20>
 3f8:	fe 01       	movw	r30, r28
 3fa:	35 96       	adiw	r30, 0x05	; 5
 3fc:	61 91       	ld	r22, Z+
 3fe:	71 91       	ld	r23, Z+
 400:	80 91 66 00 	lds	r24, 0x0066
 404:	90 91 67 00 	lds	r25, 0x0067
 408:	af 01       	movw	r20, r30
 40a:	0e 94 0b 02 	call	0x416	; 0x416 <vfprintf>
 40e:	20 96       	adiw	r28, 0x00	; 0
 410:	e2 e0       	ldi	r30, 0x02	; 2
 412:	0c 94 b4 04 	jmp	0x968	; 0x968 <__epilogue_restores__+0x20>

00000416 <vfprintf>:
 416:	ab e0       	ldi	r26, 0x0B	; 11
 418:	b0 e0       	ldi	r27, 0x00	; 0
 41a:	e1 e1       	ldi	r30, 0x11	; 17
 41c:	f2 e0       	ldi	r31, 0x02	; 2
 41e:	0c 94 88 04 	jmp	0x910	; 0x910 <__prologue_saves__>
 422:	3c 01       	movw	r6, r24
 424:	2b 01       	movw	r4, r22
 426:	5a 01       	movw	r10, r20
 428:	fc 01       	movw	r30, r24
 42a:	17 82       	std	Z+7, r1	; 0x07
 42c:	16 82       	std	Z+6, r1	; 0x06
 42e:	83 81       	ldd	r24, Z+3	; 0x03
 430:	81 fd       	sbrc	r24, 1
 432:	03 c0       	rjmp	.+6      	; 0x43a <vfprintf+0x24>
 434:	6f ef       	ldi	r22, 0xFF	; 255
 436:	7f ef       	ldi	r23, 0xFF	; 255
 438:	c6 c1       	rjmp	.+908    	; 0x7c6 <__stack+0x367>
 43a:	9a e0       	ldi	r25, 0x0A	; 10
 43c:	89 2e       	mov	r8, r25
 43e:	1e 01       	movw	r2, r28
 440:	08 94       	sec
 442:	21 1c       	adc	r2, r1
 444:	31 1c       	adc	r3, r1
 446:	f3 01       	movw	r30, r6
 448:	23 81       	ldd	r18, Z+3	; 0x03
 44a:	f2 01       	movw	r30, r4
 44c:	23 fd       	sbrc	r18, 3
 44e:	85 91       	lpm	r24, Z+
 450:	23 ff       	sbrs	r18, 3
 452:	81 91       	ld	r24, Z+
 454:	2f 01       	movw	r4, r30
 456:	88 23       	and	r24, r24
 458:	09 f4       	brne	.+2      	; 0x45c <vfprintf+0x46>
 45a:	b2 c1       	rjmp	.+868    	; 0x7c0 <__stack+0x361>
 45c:	85 32       	cpi	r24, 0x25	; 37
 45e:	39 f4       	brne	.+14     	; 0x46e <__stack+0xf>
 460:	23 fd       	sbrc	r18, 3
 462:	85 91       	lpm	r24, Z+
 464:	23 ff       	sbrs	r18, 3
 466:	81 91       	ld	r24, Z+
 468:	2f 01       	movw	r4, r30
 46a:	85 32       	cpi	r24, 0x25	; 37
 46c:	29 f4       	brne	.+10     	; 0x478 <__stack+0x19>
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	b3 01       	movw	r22, r6
 472:	0e 94 fe 03 	call	0x7fc	; 0x7fc <fputc>
 476:	e7 cf       	rjmp	.-50     	; 0x446 <vfprintf+0x30>
 478:	98 2f       	mov	r25, r24
 47a:	ff 24       	eor	r15, r15
 47c:	ee 24       	eor	r14, r14
 47e:	99 24       	eor	r9, r9
 480:	ff e1       	ldi	r31, 0x1F	; 31
 482:	ff 15       	cp	r31, r15
 484:	d0 f0       	brcs	.+52     	; 0x4ba <__stack+0x5b>
 486:	9b 32       	cpi	r25, 0x2B	; 43
 488:	69 f0       	breq	.+26     	; 0x4a4 <__stack+0x45>
 48a:	9c 32       	cpi	r25, 0x2C	; 44
 48c:	28 f4       	brcc	.+10     	; 0x498 <__stack+0x39>
 48e:	90 32       	cpi	r25, 0x20	; 32
 490:	59 f0       	breq	.+22     	; 0x4a8 <__stack+0x49>
 492:	93 32       	cpi	r25, 0x23	; 35
 494:	91 f4       	brne	.+36     	; 0x4ba <__stack+0x5b>
 496:	0e c0       	rjmp	.+28     	; 0x4b4 <__stack+0x55>
 498:	9d 32       	cpi	r25, 0x2D	; 45
 49a:	49 f0       	breq	.+18     	; 0x4ae <__stack+0x4f>
 49c:	90 33       	cpi	r25, 0x30	; 48
 49e:	69 f4       	brne	.+26     	; 0x4ba <__stack+0x5b>
 4a0:	41 e0       	ldi	r20, 0x01	; 1
 4a2:	24 c0       	rjmp	.+72     	; 0x4ec <__stack+0x8d>
 4a4:	52 e0       	ldi	r21, 0x02	; 2
 4a6:	f5 2a       	or	r15, r21
 4a8:	84 e0       	ldi	r24, 0x04	; 4
 4aa:	f8 2a       	or	r15, r24
 4ac:	28 c0       	rjmp	.+80     	; 0x4fe <__stack+0x9f>
 4ae:	98 e0       	ldi	r25, 0x08	; 8
 4b0:	f9 2a       	or	r15, r25
 4b2:	25 c0       	rjmp	.+74     	; 0x4fe <__stack+0x9f>
 4b4:	e0 e1       	ldi	r30, 0x10	; 16
 4b6:	fe 2a       	or	r15, r30
 4b8:	22 c0       	rjmp	.+68     	; 0x4fe <__stack+0x9f>
 4ba:	f7 fc       	sbrc	r15, 7
 4bc:	29 c0       	rjmp	.+82     	; 0x510 <__stack+0xb1>
 4be:	89 2f       	mov	r24, r25
 4c0:	80 53       	subi	r24, 0x30	; 48
 4c2:	8a 30       	cpi	r24, 0x0A	; 10
 4c4:	70 f4       	brcc	.+28     	; 0x4e2 <__stack+0x83>
 4c6:	f6 fe       	sbrs	r15, 6
 4c8:	05 c0       	rjmp	.+10     	; 0x4d4 <__stack+0x75>
 4ca:	98 9c       	mul	r9, r8
 4cc:	90 2c       	mov	r9, r0
 4ce:	11 24       	eor	r1, r1
 4d0:	98 0e       	add	r9, r24
 4d2:	15 c0       	rjmp	.+42     	; 0x4fe <__stack+0x9f>
 4d4:	e8 9c       	mul	r14, r8
 4d6:	e0 2c       	mov	r14, r0
 4d8:	11 24       	eor	r1, r1
 4da:	e8 0e       	add	r14, r24
 4dc:	f0 e2       	ldi	r31, 0x20	; 32
 4de:	ff 2a       	or	r15, r31
 4e0:	0e c0       	rjmp	.+28     	; 0x4fe <__stack+0x9f>
 4e2:	9e 32       	cpi	r25, 0x2E	; 46
 4e4:	29 f4       	brne	.+10     	; 0x4f0 <__stack+0x91>
 4e6:	f6 fc       	sbrc	r15, 6
 4e8:	6b c1       	rjmp	.+726    	; 0x7c0 <__stack+0x361>
 4ea:	40 e4       	ldi	r20, 0x40	; 64
 4ec:	f4 2a       	or	r15, r20
 4ee:	07 c0       	rjmp	.+14     	; 0x4fe <__stack+0x9f>
 4f0:	9c 36       	cpi	r25, 0x6C	; 108
 4f2:	19 f4       	brne	.+6      	; 0x4fa <__stack+0x9b>
 4f4:	50 e8       	ldi	r21, 0x80	; 128
 4f6:	f5 2a       	or	r15, r21
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <__stack+0x9f>
 4fa:	98 36       	cpi	r25, 0x68	; 104
 4fc:	49 f4       	brne	.+18     	; 0x510 <__stack+0xb1>
 4fe:	f2 01       	movw	r30, r4
 500:	23 fd       	sbrc	r18, 3
 502:	95 91       	lpm	r25, Z+
 504:	23 ff       	sbrs	r18, 3
 506:	91 91       	ld	r25, Z+
 508:	2f 01       	movw	r4, r30
 50a:	99 23       	and	r25, r25
 50c:	09 f0       	breq	.+2      	; 0x510 <__stack+0xb1>
 50e:	b8 cf       	rjmp	.-144    	; 0x480 <__stack+0x21>
 510:	89 2f       	mov	r24, r25
 512:	85 54       	subi	r24, 0x45	; 69
 514:	83 30       	cpi	r24, 0x03	; 3
 516:	18 f0       	brcs	.+6      	; 0x51e <__stack+0xbf>
 518:	80 52       	subi	r24, 0x20	; 32
 51a:	83 30       	cpi	r24, 0x03	; 3
 51c:	38 f4       	brcc	.+14     	; 0x52c <__stack+0xcd>
 51e:	44 e0       	ldi	r20, 0x04	; 4
 520:	50 e0       	ldi	r21, 0x00	; 0
 522:	a4 0e       	add	r10, r20
 524:	b5 1e       	adc	r11, r21
 526:	5f e3       	ldi	r21, 0x3F	; 63
 528:	59 83       	std	Y+1, r21	; 0x01
 52a:	0f c0       	rjmp	.+30     	; 0x54a <__stack+0xeb>
 52c:	93 36       	cpi	r25, 0x63	; 99
 52e:	31 f0       	breq	.+12     	; 0x53c <__stack+0xdd>
 530:	93 37       	cpi	r25, 0x73	; 115
 532:	79 f0       	breq	.+30     	; 0x552 <__stack+0xf3>
 534:	93 35       	cpi	r25, 0x53	; 83
 536:	09 f0       	breq	.+2      	; 0x53a <__stack+0xdb>
 538:	56 c0       	rjmp	.+172    	; 0x5e6 <__stack+0x187>
 53a:	20 c0       	rjmp	.+64     	; 0x57c <__stack+0x11d>
 53c:	f5 01       	movw	r30, r10
 53e:	80 81       	ld	r24, Z
 540:	89 83       	std	Y+1, r24	; 0x01
 542:	42 e0       	ldi	r20, 0x02	; 2
 544:	50 e0       	ldi	r21, 0x00	; 0
 546:	a4 0e       	add	r10, r20
 548:	b5 1e       	adc	r11, r21
 54a:	61 01       	movw	r12, r2
 54c:	01 e0       	ldi	r16, 0x01	; 1
 54e:	10 e0       	ldi	r17, 0x00	; 0
 550:	12 c0       	rjmp	.+36     	; 0x576 <__stack+0x117>
 552:	f5 01       	movw	r30, r10
 554:	c0 80       	ld	r12, Z
 556:	d1 80       	ldd	r13, Z+1	; 0x01
 558:	f6 fc       	sbrc	r15, 6
 55a:	03 c0       	rjmp	.+6      	; 0x562 <__stack+0x103>
 55c:	6f ef       	ldi	r22, 0xFF	; 255
 55e:	7f ef       	ldi	r23, 0xFF	; 255
 560:	02 c0       	rjmp	.+4      	; 0x566 <__stack+0x107>
 562:	69 2d       	mov	r22, r9
 564:	70 e0       	ldi	r23, 0x00	; 0
 566:	42 e0       	ldi	r20, 0x02	; 2
 568:	50 e0       	ldi	r21, 0x00	; 0
 56a:	a4 0e       	add	r10, r20
 56c:	b5 1e       	adc	r11, r21
 56e:	c6 01       	movw	r24, r12
 570:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <strnlen>
 574:	8c 01       	movw	r16, r24
 576:	5f e7       	ldi	r21, 0x7F	; 127
 578:	f5 22       	and	r15, r21
 57a:	14 c0       	rjmp	.+40     	; 0x5a4 <__stack+0x145>
 57c:	f5 01       	movw	r30, r10
 57e:	c0 80       	ld	r12, Z
 580:	d1 80       	ldd	r13, Z+1	; 0x01
 582:	f6 fc       	sbrc	r15, 6
 584:	03 c0       	rjmp	.+6      	; 0x58c <__stack+0x12d>
 586:	6f ef       	ldi	r22, 0xFF	; 255
 588:	7f ef       	ldi	r23, 0xFF	; 255
 58a:	02 c0       	rjmp	.+4      	; 0x590 <__stack+0x131>
 58c:	69 2d       	mov	r22, r9
 58e:	70 e0       	ldi	r23, 0x00	; 0
 590:	42 e0       	ldi	r20, 0x02	; 2
 592:	50 e0       	ldi	r21, 0x00	; 0
 594:	a4 0e       	add	r10, r20
 596:	b5 1e       	adc	r11, r21
 598:	c6 01       	movw	r24, r12
 59a:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <strnlen_P>
 59e:	8c 01       	movw	r16, r24
 5a0:	50 e8       	ldi	r21, 0x80	; 128
 5a2:	f5 2a       	or	r15, r21
 5a4:	f3 fe       	sbrs	r15, 3
 5a6:	07 c0       	rjmp	.+14     	; 0x5b6 <__stack+0x157>
 5a8:	1a c0       	rjmp	.+52     	; 0x5de <__stack+0x17f>
 5aa:	80 e2       	ldi	r24, 0x20	; 32
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	b3 01       	movw	r22, r6
 5b0:	0e 94 fe 03 	call	0x7fc	; 0x7fc <fputc>
 5b4:	ea 94       	dec	r14
 5b6:	8e 2d       	mov	r24, r14
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	08 17       	cp	r16, r24
 5bc:	19 07       	cpc	r17, r25
 5be:	a8 f3       	brcs	.-22     	; 0x5aa <__stack+0x14b>
 5c0:	0e c0       	rjmp	.+28     	; 0x5de <__stack+0x17f>
 5c2:	f6 01       	movw	r30, r12
 5c4:	f7 fc       	sbrc	r15, 7
 5c6:	85 91       	lpm	r24, Z+
 5c8:	f7 fe       	sbrs	r15, 7
 5ca:	81 91       	ld	r24, Z+
 5cc:	6f 01       	movw	r12, r30
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	b3 01       	movw	r22, r6
 5d2:	0e 94 fe 03 	call	0x7fc	; 0x7fc <fputc>
 5d6:	e1 10       	cpse	r14, r1
 5d8:	ea 94       	dec	r14
 5da:	01 50       	subi	r16, 0x01	; 1
 5dc:	10 40       	sbci	r17, 0x00	; 0
 5de:	01 15       	cp	r16, r1
 5e0:	11 05       	cpc	r17, r1
 5e2:	79 f7       	brne	.-34     	; 0x5c2 <__stack+0x163>
 5e4:	ea c0       	rjmp	.+468    	; 0x7ba <__stack+0x35b>
 5e6:	94 36       	cpi	r25, 0x64	; 100
 5e8:	11 f0       	breq	.+4      	; 0x5ee <__stack+0x18f>
 5ea:	99 36       	cpi	r25, 0x69	; 105
 5ec:	69 f5       	brne	.+90     	; 0x648 <__stack+0x1e9>
 5ee:	f7 fe       	sbrs	r15, 7
 5f0:	08 c0       	rjmp	.+16     	; 0x602 <__stack+0x1a3>
 5f2:	f5 01       	movw	r30, r10
 5f4:	20 81       	ld	r18, Z
 5f6:	31 81       	ldd	r19, Z+1	; 0x01
 5f8:	42 81       	ldd	r20, Z+2	; 0x02
 5fa:	53 81       	ldd	r21, Z+3	; 0x03
 5fc:	84 e0       	ldi	r24, 0x04	; 4
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	0a c0       	rjmp	.+20     	; 0x616 <__stack+0x1b7>
 602:	f5 01       	movw	r30, r10
 604:	80 81       	ld	r24, Z
 606:	91 81       	ldd	r25, Z+1	; 0x01
 608:	9c 01       	movw	r18, r24
 60a:	44 27       	eor	r20, r20
 60c:	37 fd       	sbrc	r19, 7
 60e:	40 95       	com	r20
 610:	54 2f       	mov	r21, r20
 612:	82 e0       	ldi	r24, 0x02	; 2
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	a8 0e       	add	r10, r24
 618:	b9 1e       	adc	r11, r25
 61a:	9f e6       	ldi	r25, 0x6F	; 111
 61c:	f9 22       	and	r15, r25
 61e:	57 ff       	sbrs	r21, 7
 620:	09 c0       	rjmp	.+18     	; 0x634 <__stack+0x1d5>
 622:	50 95       	com	r21
 624:	40 95       	com	r20
 626:	30 95       	com	r19
 628:	21 95       	neg	r18
 62a:	3f 4f       	sbci	r19, 0xFF	; 255
 62c:	4f 4f       	sbci	r20, 0xFF	; 255
 62e:	5f 4f       	sbci	r21, 0xFF	; 255
 630:	e0 e8       	ldi	r30, 0x80	; 128
 632:	fe 2a       	or	r15, r30
 634:	ca 01       	movw	r24, r20
 636:	b9 01       	movw	r22, r18
 638:	a1 01       	movw	r20, r2
 63a:	2a e0       	ldi	r18, 0x0A	; 10
 63c:	30 e0       	ldi	r19, 0x00	; 0
 63e:	0e 94 2a 04 	call	0x854	; 0x854 <__ultoa_invert>
 642:	d8 2e       	mov	r13, r24
 644:	d2 18       	sub	r13, r2
 646:	40 c0       	rjmp	.+128    	; 0x6c8 <__stack+0x269>
 648:	95 37       	cpi	r25, 0x75	; 117
 64a:	29 f4       	brne	.+10     	; 0x656 <__stack+0x1f7>
 64c:	1f 2d       	mov	r17, r15
 64e:	1f 7e       	andi	r17, 0xEF	; 239
 650:	2a e0       	ldi	r18, 0x0A	; 10
 652:	30 e0       	ldi	r19, 0x00	; 0
 654:	1d c0       	rjmp	.+58     	; 0x690 <__stack+0x231>
 656:	1f 2d       	mov	r17, r15
 658:	19 7f       	andi	r17, 0xF9	; 249
 65a:	9f 36       	cpi	r25, 0x6F	; 111
 65c:	61 f0       	breq	.+24     	; 0x676 <__stack+0x217>
 65e:	90 37       	cpi	r25, 0x70	; 112
 660:	20 f4       	brcc	.+8      	; 0x66a <__stack+0x20b>
 662:	98 35       	cpi	r25, 0x58	; 88
 664:	09 f0       	breq	.+2      	; 0x668 <__stack+0x209>
 666:	ac c0       	rjmp	.+344    	; 0x7c0 <__stack+0x361>
 668:	0f c0       	rjmp	.+30     	; 0x688 <__stack+0x229>
 66a:	90 37       	cpi	r25, 0x70	; 112
 66c:	39 f0       	breq	.+14     	; 0x67c <__stack+0x21d>
 66e:	98 37       	cpi	r25, 0x78	; 120
 670:	09 f0       	breq	.+2      	; 0x674 <__stack+0x215>
 672:	a6 c0       	rjmp	.+332    	; 0x7c0 <__stack+0x361>
 674:	04 c0       	rjmp	.+8      	; 0x67e <__stack+0x21f>
 676:	28 e0       	ldi	r18, 0x08	; 8
 678:	30 e0       	ldi	r19, 0x00	; 0
 67a:	0a c0       	rjmp	.+20     	; 0x690 <__stack+0x231>
 67c:	10 61       	ori	r17, 0x10	; 16
 67e:	14 fd       	sbrc	r17, 4
 680:	14 60       	ori	r17, 0x04	; 4
 682:	20 e1       	ldi	r18, 0x10	; 16
 684:	30 e0       	ldi	r19, 0x00	; 0
 686:	04 c0       	rjmp	.+8      	; 0x690 <__stack+0x231>
 688:	14 fd       	sbrc	r17, 4
 68a:	16 60       	ori	r17, 0x06	; 6
 68c:	20 e1       	ldi	r18, 0x10	; 16
 68e:	32 e0       	ldi	r19, 0x02	; 2
 690:	17 ff       	sbrs	r17, 7
 692:	08 c0       	rjmp	.+16     	; 0x6a4 <__stack+0x245>
 694:	f5 01       	movw	r30, r10
 696:	60 81       	ld	r22, Z
 698:	71 81       	ldd	r23, Z+1	; 0x01
 69a:	82 81       	ldd	r24, Z+2	; 0x02
 69c:	93 81       	ldd	r25, Z+3	; 0x03
 69e:	44 e0       	ldi	r20, 0x04	; 4
 6a0:	50 e0       	ldi	r21, 0x00	; 0
 6a2:	08 c0       	rjmp	.+16     	; 0x6b4 <__stack+0x255>
 6a4:	f5 01       	movw	r30, r10
 6a6:	80 81       	ld	r24, Z
 6a8:	91 81       	ldd	r25, Z+1	; 0x01
 6aa:	bc 01       	movw	r22, r24
 6ac:	80 e0       	ldi	r24, 0x00	; 0
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	42 e0       	ldi	r20, 0x02	; 2
 6b2:	50 e0       	ldi	r21, 0x00	; 0
 6b4:	a4 0e       	add	r10, r20
 6b6:	b5 1e       	adc	r11, r21
 6b8:	a1 01       	movw	r20, r2
 6ba:	0e 94 2a 04 	call	0x854	; 0x854 <__ultoa_invert>
 6be:	d8 2e       	mov	r13, r24
 6c0:	d2 18       	sub	r13, r2
 6c2:	8f e7       	ldi	r24, 0x7F	; 127
 6c4:	f8 2e       	mov	r15, r24
 6c6:	f1 22       	and	r15, r17
 6c8:	f6 fe       	sbrs	r15, 6
 6ca:	0b c0       	rjmp	.+22     	; 0x6e2 <__stack+0x283>
 6cc:	5e ef       	ldi	r21, 0xFE	; 254
 6ce:	f5 22       	and	r15, r21
 6d0:	d9 14       	cp	r13, r9
 6d2:	38 f4       	brcc	.+14     	; 0x6e2 <__stack+0x283>
 6d4:	f4 fe       	sbrs	r15, 4
 6d6:	07 c0       	rjmp	.+14     	; 0x6e6 <__stack+0x287>
 6d8:	f2 fc       	sbrc	r15, 2
 6da:	05 c0       	rjmp	.+10     	; 0x6e6 <__stack+0x287>
 6dc:	8f ee       	ldi	r24, 0xEF	; 239
 6de:	f8 22       	and	r15, r24
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <__stack+0x287>
 6e2:	1d 2d       	mov	r17, r13
 6e4:	01 c0       	rjmp	.+2      	; 0x6e8 <__stack+0x289>
 6e6:	19 2d       	mov	r17, r9
 6e8:	f4 fe       	sbrs	r15, 4
 6ea:	0d c0       	rjmp	.+26     	; 0x706 <__stack+0x2a7>
 6ec:	fe 01       	movw	r30, r28
 6ee:	ed 0d       	add	r30, r13
 6f0:	f1 1d       	adc	r31, r1
 6f2:	80 81       	ld	r24, Z
 6f4:	80 33       	cpi	r24, 0x30	; 48
 6f6:	19 f4       	brne	.+6      	; 0x6fe <__stack+0x29f>
 6f8:	99 ee       	ldi	r25, 0xE9	; 233
 6fa:	f9 22       	and	r15, r25
 6fc:	08 c0       	rjmp	.+16     	; 0x70e <__stack+0x2af>
 6fe:	1f 5f       	subi	r17, 0xFF	; 255
 700:	f2 fe       	sbrs	r15, 2
 702:	05 c0       	rjmp	.+10     	; 0x70e <__stack+0x2af>
 704:	03 c0       	rjmp	.+6      	; 0x70c <__stack+0x2ad>
 706:	8f 2d       	mov	r24, r15
 708:	86 78       	andi	r24, 0x86	; 134
 70a:	09 f0       	breq	.+2      	; 0x70e <__stack+0x2af>
 70c:	1f 5f       	subi	r17, 0xFF	; 255
 70e:	0f 2d       	mov	r16, r15
 710:	f3 fc       	sbrc	r15, 3
 712:	14 c0       	rjmp	.+40     	; 0x73c <__stack+0x2dd>
 714:	f0 fe       	sbrs	r15, 0
 716:	0f c0       	rjmp	.+30     	; 0x736 <__stack+0x2d7>
 718:	1e 15       	cp	r17, r14
 71a:	10 f0       	brcs	.+4      	; 0x720 <__stack+0x2c1>
 71c:	9d 2c       	mov	r9, r13
 71e:	0b c0       	rjmp	.+22     	; 0x736 <__stack+0x2d7>
 720:	9d 2c       	mov	r9, r13
 722:	9e 0c       	add	r9, r14
 724:	91 1a       	sub	r9, r17
 726:	1e 2d       	mov	r17, r14
 728:	06 c0       	rjmp	.+12     	; 0x736 <__stack+0x2d7>
 72a:	80 e2       	ldi	r24, 0x20	; 32
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	b3 01       	movw	r22, r6
 730:	0e 94 fe 03 	call	0x7fc	; 0x7fc <fputc>
 734:	1f 5f       	subi	r17, 0xFF	; 255
 736:	1e 15       	cp	r17, r14
 738:	c0 f3       	brcs	.-16     	; 0x72a <__stack+0x2cb>
 73a:	04 c0       	rjmp	.+8      	; 0x744 <__stack+0x2e5>
 73c:	1e 15       	cp	r17, r14
 73e:	10 f4       	brcc	.+4      	; 0x744 <__stack+0x2e5>
 740:	e1 1a       	sub	r14, r17
 742:	01 c0       	rjmp	.+2      	; 0x746 <__stack+0x2e7>
 744:	ee 24       	eor	r14, r14
 746:	04 ff       	sbrs	r16, 4
 748:	0f c0       	rjmp	.+30     	; 0x768 <__stack+0x309>
 74a:	80 e3       	ldi	r24, 0x30	; 48
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	b3 01       	movw	r22, r6
 750:	0e 94 fe 03 	call	0x7fc	; 0x7fc <fputc>
 754:	02 ff       	sbrs	r16, 2
 756:	1d c0       	rjmp	.+58     	; 0x792 <__stack+0x333>
 758:	01 fd       	sbrc	r16, 1
 75a:	03 c0       	rjmp	.+6      	; 0x762 <__stack+0x303>
 75c:	88 e7       	ldi	r24, 0x78	; 120
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	0e c0       	rjmp	.+28     	; 0x77e <__stack+0x31f>
 762:	88 e5       	ldi	r24, 0x58	; 88
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	0b c0       	rjmp	.+22     	; 0x77e <__stack+0x31f>
 768:	80 2f       	mov	r24, r16
 76a:	86 78       	andi	r24, 0x86	; 134
 76c:	91 f0       	breq	.+36     	; 0x792 <__stack+0x333>
 76e:	01 ff       	sbrs	r16, 1
 770:	02 c0       	rjmp	.+4      	; 0x776 <__stack+0x317>
 772:	8b e2       	ldi	r24, 0x2B	; 43
 774:	01 c0       	rjmp	.+2      	; 0x778 <__stack+0x319>
 776:	80 e2       	ldi	r24, 0x20	; 32
 778:	f7 fc       	sbrc	r15, 7
 77a:	8d e2       	ldi	r24, 0x2D	; 45
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	b3 01       	movw	r22, r6
 780:	0e 94 fe 03 	call	0x7fc	; 0x7fc <fputc>
 784:	06 c0       	rjmp	.+12     	; 0x792 <__stack+0x333>
 786:	80 e3       	ldi	r24, 0x30	; 48
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	b3 01       	movw	r22, r6
 78c:	0e 94 fe 03 	call	0x7fc	; 0x7fc <fputc>
 790:	9a 94       	dec	r9
 792:	d9 14       	cp	r13, r9
 794:	c0 f3       	brcs	.-16     	; 0x786 <__stack+0x327>
 796:	da 94       	dec	r13
 798:	f1 01       	movw	r30, r2
 79a:	ed 0d       	add	r30, r13
 79c:	f1 1d       	adc	r31, r1
 79e:	80 81       	ld	r24, Z
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	b3 01       	movw	r22, r6
 7a4:	0e 94 fe 03 	call	0x7fc	; 0x7fc <fputc>
 7a8:	dd 20       	and	r13, r13
 7aa:	a9 f7       	brne	.-22     	; 0x796 <__stack+0x337>
 7ac:	06 c0       	rjmp	.+12     	; 0x7ba <__stack+0x35b>
 7ae:	80 e2       	ldi	r24, 0x20	; 32
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	b3 01       	movw	r22, r6
 7b4:	0e 94 fe 03 	call	0x7fc	; 0x7fc <fputc>
 7b8:	ea 94       	dec	r14
 7ba:	ee 20       	and	r14, r14
 7bc:	c1 f7       	brne	.-16     	; 0x7ae <__stack+0x34f>
 7be:	43 ce       	rjmp	.-890    	; 0x446 <vfprintf+0x30>
 7c0:	f3 01       	movw	r30, r6
 7c2:	66 81       	ldd	r22, Z+6	; 0x06
 7c4:	77 81       	ldd	r23, Z+7	; 0x07
 7c6:	cb 01       	movw	r24, r22
 7c8:	2b 96       	adiw	r28, 0x0b	; 11
 7ca:	e2 e1       	ldi	r30, 0x12	; 18
 7cc:	0c 94 a4 04 	jmp	0x948	; 0x948 <__epilogue_restores__>

000007d0 <strnlen_P>:
 7d0:	fc 01       	movw	r30, r24
 7d2:	05 90       	lpm	r0, Z+
 7d4:	61 50       	subi	r22, 0x01	; 1
 7d6:	70 40       	sbci	r23, 0x00	; 0
 7d8:	01 10       	cpse	r0, r1
 7da:	d8 f7       	brcc	.-10     	; 0x7d2 <strnlen_P+0x2>
 7dc:	80 95       	com	r24
 7de:	90 95       	com	r25
 7e0:	8e 0f       	add	r24, r30
 7e2:	9f 1f       	adc	r25, r31
 7e4:	08 95       	ret

000007e6 <strnlen>:
 7e6:	fc 01       	movw	r30, r24
 7e8:	61 50       	subi	r22, 0x01	; 1
 7ea:	70 40       	sbci	r23, 0x00	; 0
 7ec:	01 90       	ld	r0, Z+
 7ee:	01 10       	cpse	r0, r1
 7f0:	d8 f7       	brcc	.-10     	; 0x7e8 <strnlen+0x2>
 7f2:	80 95       	com	r24
 7f4:	90 95       	com	r25
 7f6:	8e 0f       	add	r24, r30
 7f8:	9f 1f       	adc	r25, r31
 7fa:	08 95       	ret

000007fc <fputc>:
 7fc:	0f 93       	push	r16
 7fe:	1f 93       	push	r17
 800:	cf 93       	push	r28
 802:	df 93       	push	r29
 804:	8c 01       	movw	r16, r24
 806:	eb 01       	movw	r28, r22
 808:	8b 81       	ldd	r24, Y+3	; 0x03
 80a:	81 ff       	sbrs	r24, 1
 80c:	1b c0       	rjmp	.+54     	; 0x844 <fputc+0x48>
 80e:	82 ff       	sbrs	r24, 2
 810:	0d c0       	rjmp	.+26     	; 0x82c <fputc+0x30>
 812:	2e 81       	ldd	r18, Y+6	; 0x06
 814:	3f 81       	ldd	r19, Y+7	; 0x07
 816:	8c 81       	ldd	r24, Y+4	; 0x04
 818:	9d 81       	ldd	r25, Y+5	; 0x05
 81a:	28 17       	cp	r18, r24
 81c:	39 07       	cpc	r19, r25
 81e:	64 f4       	brge	.+24     	; 0x838 <fputc+0x3c>
 820:	e8 81       	ld	r30, Y
 822:	f9 81       	ldd	r31, Y+1	; 0x01
 824:	01 93       	st	Z+, r16
 826:	f9 83       	std	Y+1, r31	; 0x01
 828:	e8 83       	st	Y, r30
 82a:	06 c0       	rjmp	.+12     	; 0x838 <fputc+0x3c>
 82c:	e8 85       	ldd	r30, Y+8	; 0x08
 82e:	f9 85       	ldd	r31, Y+9	; 0x09
 830:	80 2f       	mov	r24, r16
 832:	09 95       	icall
 834:	89 2b       	or	r24, r25
 836:	31 f4       	brne	.+12     	; 0x844 <fputc+0x48>
 838:	8e 81       	ldd	r24, Y+6	; 0x06
 83a:	9f 81       	ldd	r25, Y+7	; 0x07
 83c:	01 96       	adiw	r24, 0x01	; 1
 83e:	9f 83       	std	Y+7, r25	; 0x07
 840:	8e 83       	std	Y+6, r24	; 0x06
 842:	02 c0       	rjmp	.+4      	; 0x848 <fputc+0x4c>
 844:	0f ef       	ldi	r16, 0xFF	; 255
 846:	1f ef       	ldi	r17, 0xFF	; 255
 848:	c8 01       	movw	r24, r16
 84a:	df 91       	pop	r29
 84c:	cf 91       	pop	r28
 84e:	1f 91       	pop	r17
 850:	0f 91       	pop	r16
 852:	08 95       	ret

00000854 <__ultoa_invert>:
 854:	fa 01       	movw	r30, r20
 856:	aa 27       	eor	r26, r26
 858:	28 30       	cpi	r18, 0x08	; 8
 85a:	51 f1       	breq	.+84     	; 0x8b0 <__ultoa_invert+0x5c>
 85c:	20 31       	cpi	r18, 0x10	; 16
 85e:	81 f1       	breq	.+96     	; 0x8c0 <__ultoa_invert+0x6c>
 860:	e8 94       	clt
 862:	6f 93       	push	r22
 864:	6e 7f       	andi	r22, 0xFE	; 254
 866:	6e 5f       	subi	r22, 0xFE	; 254
 868:	7f 4f       	sbci	r23, 0xFF	; 255
 86a:	8f 4f       	sbci	r24, 0xFF	; 255
 86c:	9f 4f       	sbci	r25, 0xFF	; 255
 86e:	af 4f       	sbci	r26, 0xFF	; 255
 870:	b1 e0       	ldi	r27, 0x01	; 1
 872:	3e d0       	rcall	.+124    	; 0x8f0 <__ultoa_invert+0x9c>
 874:	b4 e0       	ldi	r27, 0x04	; 4
 876:	3c d0       	rcall	.+120    	; 0x8f0 <__ultoa_invert+0x9c>
 878:	67 0f       	add	r22, r23
 87a:	78 1f       	adc	r23, r24
 87c:	89 1f       	adc	r24, r25
 87e:	9a 1f       	adc	r25, r26
 880:	a1 1d       	adc	r26, r1
 882:	68 0f       	add	r22, r24
 884:	79 1f       	adc	r23, r25
 886:	8a 1f       	adc	r24, r26
 888:	91 1d       	adc	r25, r1
 88a:	a1 1d       	adc	r26, r1
 88c:	6a 0f       	add	r22, r26
 88e:	71 1d       	adc	r23, r1
 890:	81 1d       	adc	r24, r1
 892:	91 1d       	adc	r25, r1
 894:	a1 1d       	adc	r26, r1
 896:	20 d0       	rcall	.+64     	; 0x8d8 <__ultoa_invert+0x84>
 898:	09 f4       	brne	.+2      	; 0x89c <__ultoa_invert+0x48>
 89a:	68 94       	set
 89c:	3f 91       	pop	r19
 89e:	2a e0       	ldi	r18, 0x0A	; 10
 8a0:	26 9f       	mul	r18, r22
 8a2:	11 24       	eor	r1, r1
 8a4:	30 19       	sub	r19, r0
 8a6:	30 5d       	subi	r19, 0xD0	; 208
 8a8:	31 93       	st	Z+, r19
 8aa:	de f6       	brtc	.-74     	; 0x862 <__ultoa_invert+0xe>
 8ac:	cf 01       	movw	r24, r30
 8ae:	08 95       	ret
 8b0:	46 2f       	mov	r20, r22
 8b2:	47 70       	andi	r20, 0x07	; 7
 8b4:	40 5d       	subi	r20, 0xD0	; 208
 8b6:	41 93       	st	Z+, r20
 8b8:	b3 e0       	ldi	r27, 0x03	; 3
 8ba:	0f d0       	rcall	.+30     	; 0x8da <__ultoa_invert+0x86>
 8bc:	c9 f7       	brne	.-14     	; 0x8b0 <__ultoa_invert+0x5c>
 8be:	f6 cf       	rjmp	.-20     	; 0x8ac <__ultoa_invert+0x58>
 8c0:	46 2f       	mov	r20, r22
 8c2:	4f 70       	andi	r20, 0x0F	; 15
 8c4:	40 5d       	subi	r20, 0xD0	; 208
 8c6:	4a 33       	cpi	r20, 0x3A	; 58
 8c8:	18 f0       	brcs	.+6      	; 0x8d0 <__ultoa_invert+0x7c>
 8ca:	49 5d       	subi	r20, 0xD9	; 217
 8cc:	31 fd       	sbrc	r19, 1
 8ce:	40 52       	subi	r20, 0x20	; 32
 8d0:	41 93       	st	Z+, r20
 8d2:	02 d0       	rcall	.+4      	; 0x8d8 <__ultoa_invert+0x84>
 8d4:	a9 f7       	brne	.-22     	; 0x8c0 <__ultoa_invert+0x6c>
 8d6:	ea cf       	rjmp	.-44     	; 0x8ac <__ultoa_invert+0x58>
 8d8:	b4 e0       	ldi	r27, 0x04	; 4
 8da:	a6 95       	lsr	r26
 8dc:	97 95       	ror	r25
 8de:	87 95       	ror	r24
 8e0:	77 95       	ror	r23
 8e2:	67 95       	ror	r22
 8e4:	ba 95       	dec	r27
 8e6:	c9 f7       	brne	.-14     	; 0x8da <__ultoa_invert+0x86>
 8e8:	00 97       	sbiw	r24, 0x00	; 0
 8ea:	61 05       	cpc	r22, r1
 8ec:	71 05       	cpc	r23, r1
 8ee:	08 95       	ret
 8f0:	9b 01       	movw	r18, r22
 8f2:	ac 01       	movw	r20, r24
 8f4:	0a 2e       	mov	r0, r26
 8f6:	06 94       	lsr	r0
 8f8:	57 95       	ror	r21
 8fa:	47 95       	ror	r20
 8fc:	37 95       	ror	r19
 8fe:	27 95       	ror	r18
 900:	ba 95       	dec	r27
 902:	c9 f7       	brne	.-14     	; 0x8f6 <__ultoa_invert+0xa2>
 904:	62 0f       	add	r22, r18
 906:	73 1f       	adc	r23, r19
 908:	84 1f       	adc	r24, r20
 90a:	95 1f       	adc	r25, r21
 90c:	a0 1d       	adc	r26, r0
 90e:	08 95       	ret

00000910 <__prologue_saves__>:
 910:	2f 92       	push	r2
 912:	3f 92       	push	r3
 914:	4f 92       	push	r4
 916:	5f 92       	push	r5
 918:	6f 92       	push	r6
 91a:	7f 92       	push	r7
 91c:	8f 92       	push	r8
 91e:	9f 92       	push	r9
 920:	af 92       	push	r10
 922:	bf 92       	push	r11
 924:	cf 92       	push	r12
 926:	df 92       	push	r13
 928:	ef 92       	push	r14
 92a:	ff 92       	push	r15
 92c:	0f 93       	push	r16
 92e:	1f 93       	push	r17
 930:	cf 93       	push	r28
 932:	df 93       	push	r29
 934:	cd b7       	in	r28, 0x3d	; 61
 936:	de b7       	in	r29, 0x3e	; 62
 938:	ca 1b       	sub	r28, r26
 93a:	db 0b       	sbc	r29, r27
 93c:	0f b6       	in	r0, 0x3f	; 63
 93e:	f8 94       	cli
 940:	de bf       	out	0x3e, r29	; 62
 942:	0f be       	out	0x3f, r0	; 63
 944:	cd bf       	out	0x3d, r28	; 61
 946:	09 94       	ijmp

00000948 <__epilogue_restores__>:
 948:	2a 88       	ldd	r2, Y+18	; 0x12
 94a:	39 88       	ldd	r3, Y+17	; 0x11
 94c:	48 88       	ldd	r4, Y+16	; 0x10
 94e:	5f 84       	ldd	r5, Y+15	; 0x0f
 950:	6e 84       	ldd	r6, Y+14	; 0x0e
 952:	7d 84       	ldd	r7, Y+13	; 0x0d
 954:	8c 84       	ldd	r8, Y+12	; 0x0c
 956:	9b 84       	ldd	r9, Y+11	; 0x0b
 958:	aa 84       	ldd	r10, Y+10	; 0x0a
 95a:	b9 84       	ldd	r11, Y+9	; 0x09
 95c:	c8 84       	ldd	r12, Y+8	; 0x08
 95e:	df 80       	ldd	r13, Y+7	; 0x07
 960:	ee 80       	ldd	r14, Y+6	; 0x06
 962:	fd 80       	ldd	r15, Y+5	; 0x05
 964:	0c 81       	ldd	r16, Y+4	; 0x04
 966:	1b 81       	ldd	r17, Y+3	; 0x03
 968:	aa 81       	ldd	r26, Y+2	; 0x02
 96a:	b9 81       	ldd	r27, Y+1	; 0x01
 96c:	ce 0f       	add	r28, r30
 96e:	d1 1d       	adc	r29, r1
 970:	0f b6       	in	r0, 0x3f	; 63
 972:	f8 94       	cli
 974:	de bf       	out	0x3e, r29	; 62
 976:	0f be       	out	0x3f, r0	; 63
 978:	cd bf       	out	0x3d, r28	; 61
 97a:	ed 01       	movw	r28, r26
 97c:	08 95       	ret

0000097e <_exit>:
 97e:	f8 94       	cli

00000980 <__stop_program>:
 980:	ff cf       	rjmp	.-2      	; 0x980 <__stop_program>
